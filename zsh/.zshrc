# trying p10k plugin
# # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.  Initialization code that may require console input (password prompts, [y/n]
# # confirmations, etc.) must go above this block; everything else may go below.
# zmodload zsh/zprof
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

# I'm not sure what, but something is already setting this
# export PATH=/home/max/.local/bin:$PATH
export SSH_AUTH_SOCK=/run/user/1000/gnupg/S.gpg-agent.ssh
export EDITOR='vim'
# IF I remove this, then my vim color is all green
export TERM="screen-256color"

HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

ZSH_TMUX_AUTOSTART=true;
ZSH_TMUX_AUTOCONNECT=true;

#### nvm
# lazy load nvm
# Switching to lazy off. I'd like lazy if it still started autoload
zstyle ':omz:plugins:nvm' lazy no
# if I need to lazy load on commands other than node, npm, npx, pnpm, pnpx, yarn, or corepack, I can add those commands here
zstyle ':omz:plugins:nvm' lazy-cmd eslint prettier typescript vim
# auto change node version based on .nvmrc
zstyle ':omz:plugins:nvm' autoload yes
zstyle ':omz:plugins:nvm' silent-autoload yes # optionally remove the output generated by NVM when autoloading
#### /nvm


#### goenv
# lazy load goenv
# zstyle ':omz:plugins:goenv' lazy yes
#### /goenv

# disabling because I've lost track of what all these do. I'll turn them back on if I start to miss any
# zstyle ':completion:*' auto-description 'specify: %d'
# zstyle ':completion:*' completer _expand _complete _correct _approximate
# zstyle ':completion:*' format 'Completing %d'
# zstyle ':completion:*' group-name ''
# zstyle ':completion:*' menu select=2
# # Using omz lib now
# # eval "$(dircolors -b)"
# # doesn't seem do do anything
# # zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
# zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
# zstyle ':completion:*' menu select=long
# zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
# zstyle ':completion:*' use-compctl false
# zstyle ':completion:*' verbose true
# 
# zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
# zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
# # set list-colors to enable filename colorizing
# # preview directory's content with exa when completing cd
# # disable sort when completing `git checkout`
# # zstyle ':completion:*:git-checkout:*' sort false
# # set descriptions format to enable group support
# zstyle ':completion:*:descriptions' format '[%d]'
# # set list-colors to enable filename colorizing
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# # preview directory's content with exa when completing cd
# zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# # switch group using `,` and `.`
# zstyle ':fzf-tab:*' switch-group ',' '.'

## disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
# NOTE: don't use escape sequences (like '%F{red}%d%f') here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no
# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
# custom fzf flags
# NOTE: fzf-tab does not follow FZF_DEFAULT_OPTS by default
# I didn't like how tab was accepting
#zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 --bind=tab:accept
zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2
# To make fzf-tab follow FZF_DEFAULT_OPTS.
# NOTE: This may lead to unexpected behavior since some flags break this plugin. See Aloxaf/fzf-tab#455.
zstyle ':fzf-tab:*' use-fzf-default-opts yes
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'
# If you're using tmux >= 3.2, we provide a script ftb-tmux-popup to make full use of it's "popup" feature.
# really didn't like this
# zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

# export PATH="$GOENV_ROOT/bin:$PATH"
# export GOENV_ROOT="$HOME/.goenv"
export PATH=$PATH:$(go env GOPATH)/bin

#### antidote
source ~/.antidote/antidote.zsh
# Set the root name of the plugins files (.txt and .zsh) antidote will use.
zsh_plugins=${ZDOTDIR:-~}/.zsh_plugins

# Ensure the .zsh_plugins.txt file exists so you can add plugins.
[[ -f ${zsh_plugins}.txt ]] || touch ${zsh_plugins}.txt

# Lazy-load antidote from its functions directory.
fpath=(~/.antidote/functions $fpath)
autoload -Uz antidote

# Generate a new static file whenever .zsh_plugins.txt is updated.
if [[ ! ${zsh_plugins}.zsh -nt ${zsh_plugins}.txt ]]; then
  antidote bundle <${zsh_plugins}.txt >|${zsh_plugins}.zsh
fi

# Source your static plugins file.
source ${zsh_plugins}.zsh
#### /antidote

bindkey -v

# source /home/max/.gvm/scripts/gvm
fpath=($fpath $GOPATH/pkg/mod/github.com/go-task/task/v3@v3.27.1/completion/zsh)


export GPG_TTY="${TTY}"

export PATH=/usr/local/go/bin:$PATH
export PATH=/home/max/.bin:$PATH
export PATH=/home/max/.local/share/coursier/bin:$PATH
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"


export DEBFULLNAME="Max Mizikar"
export DEBEMAIL="maxmzkr@gmail.com"

# Uses the command-not-found package zsh support
# as seen in https://www.porcheron.info/command-not-found-for-zsh/
# this is installed in Ubuntu

if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
    function command_not_found_handler {
        # check because c-n-f could've been removed in the meantime
        if [ -x /usr/lib/command-not-found ]; then
            /usr/lib/command-not-found -- "$1"
            return $?
        elif [ -x /usr/share/command-not-found/command-not-found ]; then
            /usr/share/command-not-found/command-not-found -- "$1"
            return $?
        else
            printf "zsh: command not found: %s\n" "$1" >&2
            return 127
        fi
        return 0
    }
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias ipdb='ipdb3 '
alias sudo='nocorrect sudo '
alias watch='watch '

notif () {
    $@ && paplay /usr/share/sounds/gnome/default/alerts/bark.ogg
}

# function to set the title of the current tab
function set-title() {
  printf '\e]2;'"${1}"'\a'
}

# function to start tmux and set title
function new-ses() {
  tmux new -s $1
  set-title $1
}

# allow for ctrl+arrow movement
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

ENVSDIR="${HOME}"'/.venvs'

function venv() {
    source "${ENVSDIR}"'/'"${1}"'/bin/activate'
}

function makevenv() {
    "${1}" -m venv "${ENVSDIR}"'/'"${2}"
}

function vf() {
    ls -d "${ENVSDIR}"'/'*'/' | fzf | while read file; do source $file/bin/activate; done
}

# I haven't been using the salt states anymore
# function sf() {
#     sudo echo || exit 1
#     state_lookup=$(sudo salt-call --local state.show_highstate --output yaml | yq e '.local as $top | .local | keys | .[] | {.: $top[.].__sls__}' -)
#     all_sls=$(echo "${state_lookup}" | yq e '.[]' - | sort | uniq | paste -sd "," -)
#     echo "${state_lookup}" | yq e 'keys | .[]' - | fzf | while read state;
#     do
#         print -s 'sudo salt-call --local --log-level debug state.sls_id '"${state}"' '"${all_sls}";
#         sudo salt-call --local --log-level debug state.sls_id "${state}" "${all_sls}";
#     done
# }

# if systemctl --user status docker.service > /dev/null; then
# 	export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock
# fi


# Undo rm alias from ohmyzsh common-aliases
# alias rm="rm -I"

# kubectl aliases
alias kg='kubectl get'
alias kgj='kubectl get jobs'
alias kd='kubectl describe'
alias kw='kubectl wait'

# git aliases
alias gcr='current_branch'
alias gmt='git mergetool --no-promt'
alias gcpt='git commit -p'

# docker
# alias docker=podman

complete -o nospace -C /home/max/tfenv/versions/1.0.1/terraform terraform

export USE_GKE_GCLOUD_AUTH_PLUGIN=True

if command -v pyenv &> /dev/null
then
  eval "$(pyenv virtualenv-init -)"
fi
export HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew";
export HOMEBREW_CELLAR="/home/linuxbrew/.linuxbrew/Cellar";
export HOMEBREW_REPOSITORY="/home/linuxbrew/.linuxbrew/Homebrew";
export PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin${PATH+:$PATH}";
export MANPATH="/home/linuxbrew/.linuxbrew/share/man${MANPATH+:$MANPATH}:";
export INFOPATH="/home/linuxbrew/.linuxbrew/share/info:${INFOPATH:-}";

# following https://blog.askesis.pl/post/2017/04/how-to-debug-zsh-startup-time.html
# I found that gvm was causing cd to be slow.
# I am attempting to switch to goenv instead
# It was also really slow, so I'm now attempting to make it lazy load
# [[ -s "/home/max/.gvm/scripts/gvm" ]] && source "/home/max/.gvm/scripts/gvm"
# eval "$(goenv init -)"
export PATH="$GOROOT/bin:$PATH"
export PATH="$PATH:$GOPATH/bin"

eval $(dircolors /home/max/.dir_colors/dircolors)

alias vim='nvim'
export KUBE_EDITOR=nvim

export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

# zprof
